#!/usr/bin/python

# -*- mode: python -*-

import json
import os
import re
import struct
import sys
import base64

# Map format:
#   0 1 2 3 4 5 6 7
#   t t t s c ? ? e
#   i i i t o     n
#   l l l a i     d
#   e e e r n
#         t

for root, dirs, filenames in os.walk(os.path.join(os.getcwd(), "levels")):
    json_filenames = [os.path.abspath(os.path.join(root, filename)) for filename in filenames if re.match(r".+\.json$", filename)]
    for json_filename in json_filenames:
        print "Processing `%s'..." % (os.path.relpath(json_filename)),
        try:
            with open(json_filename, "r") as file_object:
                json_data = json.load(file_object)
                # Make sure that the height is exactly 15 tiles (352x240)
                assert(json_data['height'] == 15)
                # Make sure we have exactly three layers (Items, Logic, Level) in the proper order
                assert(len(json_data['layers']) == 3)
                layer_types = [str(layer['type']) for layer in json_data['layers']]
                layer_names = [str(layer['name']) for layer in json_data['layers']]
                assert([("tilelayer", "Level"), ("objectgroup", "Logic"), ("objectgroup", "Items")] == zip(layer_types, layer_names))
                # Process tile layer
                output_filename = os.path.join(os.getcwd(), "romdisk", os.path.basename(json_filename[0:json_filename.index(".json")].upper() + ".MAP"))
                with open(output_filename, "wb+") as output_fo:
                    layer_level = json_data['layers'][0]
                    layer_logic = json_data['layers'][1]
                    layer_items = json_data['layers'][2]
                    decoded_map = base64.b64decode(layer_level['data'])
                    processed_map = []
                    while decoded_map:
                        byte, = struct.unpack("<L", decoded_map[0:4])
                        processed_map.append(byte)
                        decoded_map = decoded_map[4:]
                    level_width = layer_level['width']
                    level_height = layer_level['height']
                    level = [None] * (level_width * level_height)
                    for x in range(level_width):
                        for y in range(level_height):
                            tile_number = processed_map[x + (level_width * y)]
                            byte = 0x00
                            # Block (tile number)
                            byte |= max(0, tile_number - 1) & 0x07
                            # Items
                            for item in layer_items['objects']:
                                item_x = item['x'] / 16
                                item_y = item['y'] / 16
                                if (item_x == x) and (item_y == y):
                                    byte |= 1 << 4
                            # Logic
                            for logic in layer_logic['objects']:
                                logic_x = logic['x'] / 16
                                logic_y = logic['y'] / 16
                                if (logic_x == x) and (logic_y == y):
                                    if int(logic['type']) == 0:
                                        # Start position
                                        byte |= 1 << 3
                                    elif int(logic['type']) == 1:
                                        # End position
                                        byte |= 1 << 7
                            output_fo.write(struct.pack("B", byte))
        except:
            print "FAILED"
            raise SystemExit
        print "OK"
    break
